/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: api.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as api_pb from './api_pb';


export class ApiServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/ApiService/Create',
    grpcWeb.MethodType.UNARY,
    api_pb.TodoCreateRequest,
    api_pb.TodoResponse,
    (request: api_pb.TodoCreateRequest) => {
      return request.serializeBinary();
    },
    api_pb.TodoResponse.deserializeBinary
  );

  create(
    request: api_pb.TodoCreateRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.TodoResponse>;

  create(
    request: api_pb.TodoCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<api_pb.TodoResponse>;

  create(
    request: api_pb.TodoCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ApiService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ApiService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorGetOne = new grpcWeb.MethodDescriptor(
    '/ApiService/GetOne',
    grpcWeb.MethodType.UNARY,
    api_pb.TodoRequest,
    api_pb.TodoResponse,
    (request: api_pb.TodoRequest) => {
      return request.serializeBinary();
    },
    api_pb.TodoResponse.deserializeBinary
  );

  getOne(
    request: api_pb.TodoRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.TodoResponse>;

  getOne(
    request: api_pb.TodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.TodoResponse) => void): grpcWeb.ClientReadableStream<api_pb.TodoResponse>;

  getOne(
    request: api_pb.TodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.TodoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ApiService/GetOne',
        request,
        metadata || {},
        this.methodDescriptorGetOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ApiService/GetOne',
    request,
    metadata || {},
    this.methodDescriptorGetOne);
  }

  methodDescriptorGetAll = new grpcWeb.MethodDescriptor(
    '/ApiService/GetAll',
    grpcWeb.MethodType.UNARY,
    api_pb.TodoRequest,
    api_pb.TodoAllResponse,
    (request: api_pb.TodoRequest) => {
      return request.serializeBinary();
    },
    api_pb.TodoAllResponse.deserializeBinary
  );

  getAll(
    request: api_pb.TodoRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.TodoAllResponse>;

  getAll(
    request: api_pb.TodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.TodoAllResponse) => void): grpcWeb.ClientReadableStream<api_pb.TodoAllResponse>;

  getAll(
    request: api_pb.TodoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.TodoAllResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ApiService/GetAll',
        request,
        metadata || {},
        this.methodDescriptorGetAll,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ApiService/GetAll',
    request,
    metadata || {},
    this.methodDescriptorGetAll);
  }

  methodDescriptorUpdate = new grpcWeb.MethodDescriptor(
    '/ApiService/Update',
    grpcWeb.MethodType.UNARY,
    api_pb.TodoUpdateRequest,
    api_pb.TodoUpdateResponse,
    (request: api_pb.TodoUpdateRequest) => {
      return request.serializeBinary();
    },
    api_pb.TodoUpdateResponse.deserializeBinary
  );

  update(
    request: api_pb.TodoUpdateRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.TodoUpdateResponse>;

  update(
    request: api_pb.TodoUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.TodoUpdateResponse) => void): grpcWeb.ClientReadableStream<api_pb.TodoUpdateResponse>;

  update(
    request: api_pb.TodoUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.TodoUpdateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ApiService/Update',
        request,
        metadata || {},
        this.methodDescriptorUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ApiService/Update',
    request,
    metadata || {},
    this.methodDescriptorUpdate);
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/ApiService/Delete',
    grpcWeb.MethodType.UNARY,
    api_pb.TodoDeleteRequest,
    api_pb.TodoDeleteResponse,
    (request: api_pb.TodoDeleteRequest) => {
      return request.serializeBinary();
    },
    api_pb.TodoDeleteResponse.deserializeBinary
  );

  delete(
    request: api_pb.TodoDeleteRequest,
    metadata: grpcWeb.Metadata | null): Promise<api_pb.TodoDeleteResponse>;

  delete(
    request: api_pb.TodoDeleteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_pb.TodoDeleteResponse) => void): grpcWeb.ClientReadableStream<api_pb.TodoDeleteResponse>;

  delete(
    request: api_pb.TodoDeleteRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_pb.TodoDeleteResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/ApiService/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/ApiService/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

}

